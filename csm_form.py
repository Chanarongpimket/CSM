import customtkinter as ctk
from tkinter import messagebox
import datetime
import time
import sys
import os

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException

# ========= Project Mapping =========
project_map = {
    "MA IIG 2567": "206240625",
    "MA Thaipak 2567": "206250016",
    "Blockchain": "201190986"
}

# ========= GUI =========
def start_gui():
    ctk.set_appearance_mode("System")
    ctk.set_default_color_theme("blue")

    def run_script():
        username = entry_user.get()
        password = entry_pass.get()
        task_note = entry_task_note.get()
        activity = text_activity.get("1.0", "end").strip()
        arrival = entry_arrival.get()
        finish = entry_finish.get()
        depart = entry_depart.get()
        project_code = project_map[project_dropdown.get()]

        if not all([username, password, task_note, activity, arrival, finish, depart]):
            messagebox.showerror("‚ùå Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return

        datetime_fields = {
            "ArrivalDate": arrival,
            "FinishDate": finish,
            "DepartDate": depart
        }

        messagebox.showinfo("‚åõ", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ...")
        run_automation(username, password, task_note, activity, datetime_fields, project_code)

    app = ctk.CTk()
    app.title("CSM Automation Tool")
    app.geometry("500x700")

    ctk.CTkLabel(app, text="üë§ Username").pack(pady=5)
    entry_user = ctk.CTkEntry(app, width=300)
    entry_user.pack()

    ctk.CTkLabel(app, text="üîí Password").pack(pady=5)
    entry_pass = ctk.CTkEntry(app, width=300, show="*")
    entry_pass.pack()

    ctk.CTkLabel(app, text="üìå Task Note").pack(pady=5)
    entry_task_note = ctk.CTkEntry(app, width=400)
    entry_task_note.insert(0, "INCIDENT IIG&ISP of NT1")
    entry_task_note.pack()

    ctk.CTkLabel(app, text="üìù Activity Note").pack(pady=5)
    text_activity = ctk.CTkTextbox(app, width=400, height=100)
    text_activity.pack()

    today = datetime.datetime.now().strftime("%d/%m/%Y")

    ctk.CTkLabel(app, text="üìÖ Arrival Date").pack(pady=5)
    entry_arrival = ctk.CTkEntry(app, width=300)
    entry_arrival.insert(0, f"{today} 08:30")
    entry_arrival.pack()

    ctk.CTkLabel(app, text="üìÖ Finish Date").pack(pady=5)
    entry_finish = ctk.CTkEntry(app, width=300)
    entry_finish.insert(0, f"{today} 17:30")
    entry_finish.pack()

    ctk.CTkLabel(app, text="üìÖ Depart Date").pack(pady=5)
    entry_depart = ctk.CTkEntry(app, width=300)
    entry_depart.insert(0, f"{today} 18:00")
    entry_depart.pack()

    ctk.CTkLabel(app, text="üìÅ Project").pack(pady=5)
    project_dropdown = ctk.CTkOptionMenu(app, values=list(project_map.keys()))
    project_dropdown.set("MA IIG 2567")
    project_dropdown.pack()

    ctk.CTkButton(app, text="üöÄ Submit & Run", command=run_script).pack(pady=20)

    app.mainloop()

# ========= Selenium Automation =========
def wait_and_click(driver, by, identifier, timeout=10, js_fallback=True):
    try:
        element = WebDriverWait(driver, timeout).until(EC.element_to_be_clickable((by, identifier)))
        driver.execute_script("arguments[0].scrollIntoView(true);", element)
        time.sleep(0.3)
        try:
            element.click()
        except ElementClickInterceptedException:
            if js_fallback:
                driver.execute_script("arguments[0].click();", element)
    except TimeoutException:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element {identifier}")

def get_driver_path():
    if getattr(sys, 'frozen', False):
        return os.path.join(sys._MEIPASS, "chromedriver.exe")
    return os.path.join(os.path.abspath("."), "chromedriver.exe")

def wait_and_type(driver, by, identifier, text, timeout=10):
    try:
        element = WebDriverWait(driver, timeout).until(EC.presence_of_element_located((by, identifier)))
        element.clear()
        element.send_keys(text)
        print(f"‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å {identifier} ‡πÅ‡∏•‡πâ‡∏ß")
    except TimeoutException:
        print(f"‚ùå ‡∏Å‡∏£‡∏≠‡∏Å {identifier} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")

def run_automation(USERNAME, PASSWORD, TASK_NOTE, activity, datetime_fields, project_code):
    chrome_options = Options()
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--disable-logging")
    chrome_options.add_experimental_option("d   etach", True)

    driver = webdriver.Chrome(executable_path=get_driver_path(), options=chrome_options)
    driver.maximize_window()
    driver.get("https://csm.ait.co.th/msa/home.php")

    wait_and_type(driver, By.ID, "loginname", USERNAME)
    wait_and_type(driver, By.ID, "password", PASSWORD)
    wait_and_click(driver, By.ID, "btn-login")

    try:
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'NEW SAR')]"))
        )
        print("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except:
        print("‚ùå Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî username/password ‡∏ú‡∏¥‡∏î")
        messagebox.showerror("Login Failed", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        driver.quit()
        return

    wait_and_click(driver, By.XPATH, "//button[contains(text(), 'NEW SAR')]")
    wait_and_click(driver, By.XPATH, "//a[contains(text(), '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å')]")
    wait_and_click(driver, By.ID, "process_act_module_2")
    wait_and_click(driver, By.XPATH, f"//strong[contains(text(),'{project_code}')]")

    time.sleep(2)
    WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.TAG_NAME, "iframe")))

    wait_and_type(driver, By.ID, "task_note", TASK_NOTE)
    wait_and_type(driver, By.ID, "finish_text", activity)
    for field_id, dt_str in datetime_fields.items():
        wait_and_type(driver, By.ID, field_id, dt_str)

    try:
        checkbox = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "showSubmitWorkOrderButtonDD")))
        driver.execute_script("arguments[0].scrollIntoView(true);", checkbox)
        driver.execute_script("arguments[0].click();", checkbox)
        print("‚úÖ ‡∏ï‡∏¥‡πä‡∏Å checkbox '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏ï‡∏¥‡πä‡∏Å checkbox '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        submit_btn = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "SubmitButtonWorkOrderd")))
        driver.execute_script("arguments[0].scrollIntoView(true);", submit_btn)
        driver.execute_script("arguments[0].click();", submit_btn)
        print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Submit ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏Ñ‡∏•‡∏¥‡∏Å Submit ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        WebDriverWait(driver, 10).until(EC.url_changes(driver.current_url))
        print("üåê Redirect ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£ redirect:", e)

    driver.switch_to.default_content()
    time.sleep(2)

    iframes = driver.find_elements(By.TAG_NAME, "iframe")
    checkbox_found = False
    for iframe in iframes:
        try:
            driver.switch_to.default_content()
            driver.switch_to.frame(iframe)
            checkbox_ready = driver.find_element(By.ID, "showSubmitCloseWorkOrderButton")
            driver.execute_script("arguments[0].scrollIntoView(true);", checkbox_ready)
            driver.execute_script("arguments[0].click();", checkbox_ready)
            print("‚úÖ ‡∏ï‡∏¥‡πä‡∏Å checkbox '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' ‡πÅ‡∏•‡πâ‡∏ß")
            checkbox_found = True
            break
        except:
            continue

    if not checkbox_found:
        time.sleep(5)
        try:
            driver.switch_to.default_content()
            checkbox_ready = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "showSubmitCloseWorkOrderButton")))
            driver.execute_script("arguments[0].scrollIntoView(true);", checkbox_ready)
            driver.execute_script("arguments[0].click();", checkbox_ready)
            print("‚úÖ ‡∏ï‡∏¥‡πä‡∏Å checkbox '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' ‡πÅ‡∏•‡πâ‡∏ß (no iframe)")
        except Exception as e:
            print("‚ùå ‡∏ï‡∏¥‡πä‡∏Å checkbox '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        confirm_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="SubmitButtonCloseWorkOrder"]'))
        )
        time.sleep(1.5)
        driver.execute_script("arguments[0].scrollIntoView(true);", confirm_button)
        driver.execute_script("arguments[0].click();", confirm_button)
        print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        time.sleep(3)
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        checkbox = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="accordionTaxi-collapseOne"]/div/div[3]/label'))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", checkbox)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", checkbox)
        print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏Ñ‡∏•‡∏¥‡∏Å '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        checkbox = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="action_container_form"]/div[6]/label'))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", checkbox)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", checkbox)
        print("‚úÖ ‡∏ï‡∏¥‡πä‡∏Å checkbox ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏ï‡∏¥‡πä‡∏Å checkbox ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e)

    try:
        submit_btn = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="SubmitButtonWorkOrderd"]'))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", submit_btn)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", submit_btn)
        print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e)

    time.sleep(10)
    driver.quit()

# ========= Run =========
if __name__ == "__main__":
    start_gui()
